// <auto-generated />
using System;
using Metabase.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Metabase.Migrations
{
    [DbContext(typeof(MetaDBContext))]
    [Migration("20240202124512_AddedLengthToAttribute")]
    partial class AddedLengthToAttribute
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Metabase.Models.Attributes.AttributeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotNull")
                        .HasColumnType("bit");

                    b.Property<bool>("PrimaryKey")
                        .HasColumnType("bit");

                    b.Property<int>("RelationId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<bool>("Unique")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RelationId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("Metabase.Models.Constraints.DefaultConstraint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<byte[]>("Value")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.ToTable("DefaultConstraints");
                });

            modelBuilder.Entity("Metabase.Models.Constraints.FKReference", b =>
                {
                    b.Property<int>("ForeignKeyConstraintId")
                        .HasColumnType("int");

                    b.Property<int>("ReferencingAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("ReferencedAttributeId")
                        .HasColumnType("int");

                    b.HasKey("ForeignKeyConstraintId", "ReferencingAttributeId", "ReferencedAttributeId");

                    b.HasIndex("ReferencedAttributeId");

                    b.HasIndex("ReferencingAttributeId");

                    b.ToTable("FKReference");
                });

            modelBuilder.Entity("Metabase.Models.Constraints.ForeignKeyConstraint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReferencedRelationId")
                        .HasColumnType("int");

                    b.Property<int>("RelationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReferencedRelationId");

                    b.HasIndex("RelationId");

                    b.ToTable("ForeignKeyConstraints");
                });

            modelBuilder.Entity("Metabase.Models.DatabaseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Databases");
                });

            modelBuilder.Entity("Metabase.Models.RelationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DatabaseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseId");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("Metabase.Models.Attributes.AttributeModel", b =>
                {
                    b.HasOne("Metabase.Models.RelationModel", "Relation")
                        .WithMany("Attributes")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Relation");
                });

            modelBuilder.Entity("Metabase.Models.Constraints.DefaultConstraint", b =>
                {
                    b.HasOne("Metabase.Models.Attributes.AttributeModel", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("Metabase.Models.Constraints.FKReference", b =>
                {
                    b.HasOne("Metabase.Models.Constraints.ForeignKeyConstraint", "ForeignKeyConstraint")
                        .WithMany("References")
                        .HasForeignKey("ForeignKeyConstraintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metabase.Models.Attributes.AttributeModel", "ReferencedAttribute")
                        .WithMany()
                        .HasForeignKey("ReferencedAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Metabase.Models.Attributes.AttributeModel", "ReferencingAttribute")
                        .WithMany()
                        .HasForeignKey("ReferencingAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ForeignKeyConstraint");

                    b.Navigation("ReferencedAttribute");

                    b.Navigation("ReferencingAttribute");
                });

            modelBuilder.Entity("Metabase.Models.Constraints.ForeignKeyConstraint", b =>
                {
                    b.HasOne("Metabase.Models.RelationModel", "ReferencedRelation")
                        .WithMany()
                        .HasForeignKey("ReferencedRelationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Metabase.Models.RelationModel", "Relation")
                        .WithMany()
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReferencedRelation");

                    b.Navigation("Relation");
                });

            modelBuilder.Entity("Metabase.Models.RelationModel", b =>
                {
                    b.HasOne("Metabase.Models.DatabaseModel", "Database")
                        .WithMany("Relations")
                        .HasForeignKey("DatabaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Database");
                });

            modelBuilder.Entity("Metabase.Models.Constraints.ForeignKeyConstraint", b =>
                {
                    b.Navigation("References");
                });

            modelBuilder.Entity("Metabase.Models.DatabaseModel", b =>
                {
                    b.Navigation("Relations");
                });

            modelBuilder.Entity("Metabase.Models.RelationModel", b =>
                {
                    b.Navigation("Attributes");
                });
#pragma warning restore 612, 618
        }
    }
}
